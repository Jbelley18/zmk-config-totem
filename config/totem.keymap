#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <190>; };

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        sz {
            bindings = <&kp RA(S)>;
            key-positions = <1 12>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ue {
            bindings = <&kp RA(Y)>;
            key-positions = <7 8>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ae {
            bindings = <&kp RA(Q)>;
            key-positions = <17 18>;
            timeout-ms = <28>;
            layers = <0>;
        };

        oe {
            bindings = <&kp RA(P)>;
            key-positions = <8 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <11 12>;
            timeout-ms = <28>;
            layers = <0>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <22 23>;
            timeout-ms = <28>;
            layers = <0>;
        };

        sch {
            bindings = <&Sch>;
            key-positions = <12 13 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <23 24>;
            timeout-ms = <28>;
            layers = <0>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <12 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ck {
            bindings = <&Ck>;
            key-positions = <22 23 24>;
            timeout-ms = <28>;
            layers = <0>;
        };

        k {
            bindings = <&kp K>;
            key-positions = <2 3>;
            timeout-ms = <28>;
            layers = <0>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <2 1>;
            layers = <0>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <10 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ex {
            bindings = <&Ex>;
            key-positions = <16 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        fslh {
            bindings = <&kp FSLH>;
            key-positions = <28 29>;
            timeout-ms = <28>;
            layers = <0>;
        };

        you {
            bindings = <&You>;
            key-positions = <17 18 19>;
            layers = <0>;
            timeout-ms = <28>;
        };

        qu {
            bindings = <&Qu>;
            key-positions = <1 2 3>;
            layers = <0>;
            timeout-ms = <28>;
        };
    };

    behaviors {
        mt_hp: mt_hp {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HoldPreferred";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <150>;
        };

        mt_magic: mt_magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_MAGIC";
            bindings = <&kp>, <&magic>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <150>;
        };

        mt_arrowfy: mt_arrowfy {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_ARROW";
            bindings = <&arrowfy>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        magic: magic {
            compatible = "zmk,behavior-antecedent-morph";
            label = "MAGIC";
            #binding-cells = <0>;
            defaults = <&key_repeat>;
            bindings = <
                       &sk LSHFT  &kp Z  &kp C  &kp V  &kp H  &kp J  &kp B  &kp U  &kp E  &kp Y  &kp I  &kp U  &kp T  &kp FSLH  &DotDot
            >;

            antecedents = <
                       SPACE      T      S      D      P      B      M      E      U      A      Y      RA(Q)  RA(S)  TILDE     DOT
            >;

            max-delay-ms = <500>;
        };

        ad_g: ad_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_G";
            #binding-cells = <0>;
            defaults = <&kp G>;
            bindings = <&kp R>;
            antecedents = <W>;
            max-delay-ms = <150>;
        };

        mt_hmr_l: mt_hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 5 6 7 17 16 26 27 28 29 18 8 9 19 30 31 32 33 34 36 37>;
            require-prior-idle-ms = <200>;
        };

        mt_hmr_r: mt_hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <20 21 10 0 1 11 22 23 12 2 3 24 13 4 14 25 32 33 34 36 37>;
            require-prior-idle-ms = <200>;
        };

        comma_gt: comma_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_GT";
            bindings = <&kp COMMA>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_lt: dot_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_LT";
            bindings = <&kp DOT>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mt_hmr_comma_gt: mt_hmr_comma_gt {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_COMMA_GT";
            bindings = <&kp>, <&comma_gt>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <20 21 10 0 1 11 22 23 12 2 3 24 13 4 14 25 32 33 34 36 37>;
            require-prior-idle-ms = <200>;
        };

        lt_hmr_l: lt_hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 5 6 7 17 16 26 27 28 29 18 8 9 19 30 31 32 33 34 36 37>;
            require-prior-idle-ms = <30>;
        };

        lt_hmr_r: lt_hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <20 21 10 0 1 11 22 23 12 2 3 24 13 4 14 25 32 33 34 36 37>;
            require-prior-idle-ms = <30>;
        };

        lowO: lowO {
            compatible = "zmk,behavior-mod-morph";
            label = "LOWO";
            bindings = <&kp O>, <&kp O>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lowU: lowU {
            compatible = "zmk,behavior-mod-morph";
            label = "LOWU";
            bindings = <&kp U>, <&kp U>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lowX: lowX {
            compatible = "zmk,behavior-mod-morph";
            label = "LOWX";
            bindings = <&kp X>, <&kp X>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lowC: lowC {
            compatible = "zmk,behavior-mod-morph";
            label = "LOWC";
            bindings = <&kp C>, <&kp C>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lowH: lowH {
            compatible = "zmk,behavior-mod-morph";
            label = "LOWH";
            bindings = <&kp H>, <&kp H>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        sl_long: sl_long {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_LONG";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <3000>;
            ignore-modifiers;
        };
    };

    macros {
        arrowfy: arrowfy {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp GT>;
            label = "ARROWFY";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        DotDot: DotDot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT>;
            label = "DotDot";
        };

        Sch: Sch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &lowC &lowH>;
            label = "SCH";
        };

        Ck: Ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "CK";
        };

        Ex: Ex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &lowX>;
            label = "EX";
        };

        You: You {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &lowO &lowU>;
            label = "YOU";
        };

        Qu: Qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &lowU>;
            label = "QU";
        };

        StickNav: StickNav {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &sl_long 5>;
            label = "STICKNAV";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
        &kp W   &ad_g          &kp D                     &kp F                 &trans                &trans       &kp L                        &kp U                     &kp O          &kp Y
        &kp R   &lt_hmr_l 1 S  &mt_hmr_l LEFT_CONTROL T  &mt_hmr_l LEFT_ALT H  &trans                &trans       &mt_hmr_r LEFT_ALT N         &mt_hmr_r LEFT_CONTROL E  &lt_hmr_r 1 A  &kp I
&trans  &trans  &kp C          &kp M                     &mt_hmr_l LEFT_GUI P  &trans                &trans       &mt_hmr_comma_gt LEFT_GUI 0  &dot_lt                   &kp SQT        &trans  &trans
                               &trans                    &mo 2                 &mt_magic LSHIFT V    &lt 6 SPACE  &lt 4 BSPC                   &trans
            >;
        };

        sym {
            bindings = <
        &trans    &kp AT     &kp PIPE   &kp AMPS  &trans    &trans  &trans                   &kp BSLH                 &kp TILDE  &trans
        &kp HASH  &kp DLLR   &kp STAR   &kp EXCL  &trans    &trans  &mt_arrowfy MINUS MINUS  &mt_arrowfy EQUAL EQUAL  &kp COLON  &kp SEMI
&trans  &trans    &kp CARET  &kp PRCNT  &trans    &trans    &trans  &kp UNDER                &kp PLUS                 &kp GRAVE  &trans    &trans
                             &trans     &trans    &trans    &trans  &trans                   &trans
            >;
        };

        num {
            bindings = <
        &trans  &trans  &kp LBKT  &kp RBKT  &trans    &trans  &kp N7    &kp N8    &kp N9  &trans
        &kp N0  &kp N3  &kp N2    &kp N1    &trans    &trans  &kp N4    &kp N5    &kp N6  &trans
&trans  &trans  &trans  &kp LPAR  &kp RPAR  &trans    &trans  &kp RBRC  &kp LBRC  &trans  &trans  &trans
                        &trans    &trans    &trans    &trans  &trans    &trans
            >;
        };

        nav {
            bindings = <
        &tog 5   &trans   &trans            &trans          &trans    &trans  &kp HOME        &kp END         &kp DEL       &trans
        &kp ESC  &kp TAB  &kp LEFT_CONTROL  &mt LALT ENTER  &trans    &trans  &StickNav LEFT  &StickNav DOWN  &StickNav UP  &StickNav RIGHT
&trans  &trans   &trans   &trans            &kp LEFT_GUI    &trans    &trans  &trans          &kp PG_DN       &kp PG_UP     &trans           &trans
                          &trans            &trans          &trans    &trans  &trans          &trans
            >;
        };

        func {
            bindings = <
        &trans  &kp C_VOL_DN  &kp C_VOL_UP         &kp C_MUTE       &trans    &trans  &kp PSCRN        &kp F11       &kp F12  &trans
        &kp F1  &kp F2        &mt LEFT_CONTROL F3  &mt LEFT_ALT F4  &trans    &trans  &mt LEFT_ALT F7  &mt LCTRL F8  &kp F9   &kp F10
&trans  &trans  &trans        &trans               &mt LGUI F5      &trans    &trans  &mt RGUI F6      &trans        &trans   &trans   &trans
                              &trans               &trans           &trans    &trans  &trans           &trans
            >;
        };

        nav_lock {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        nav_hold {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        lock_nav {
            if-layers = <5>;
            then-layer = <3>;
        };

        hold_nav {
            if-layers = <6>;
            then-layer = <3>;
        };
    };
};
